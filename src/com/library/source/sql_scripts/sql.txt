This is just a text file for sql scripts so I won't forget what I do in database. :3

1. You need to create a database for this system.
CREATE DATABASE library_system;

2. Create a table name countries to store countries' name.
    CREATE TABLE countries (
        id SMALLINT GENERATED ALWAYS AS IDENTITY,
        name VARCHAR(60) NOT NULL,
        iso_code VARCHAR(2) NOT NULL,
        PRIMARY KEY (id));

3. Create a table named states to store state name.
    CREATE TABLE states (
        id SMALLINT GENERATED ALWAYS AS IDENTITY,
        name VARCHAR(60) NOT NULL,
        country_id SMALLINT NOT NULL,
        PRIMARY KEY (id),
        FOREIGN KEY (country_id) REFERENCES countries(id));

4. Create a table named addresses to store everyone's addresses.
    CREATE TABLE addresses (
        id int GENERATED ALWAYS AS IDENTITY,
        street VARCHAR(95) NOT NULL,
        city VARCHAR(35) NOT NULL,
        state_id int NOT NULL,
        zipcode VARCHAR(5) NOT NULL,
        PRIMARY KEY(id),
        FOREIGN KEY(state_id) REFERENCES states(id));

Debugging both states and countries table combine

SELECT states.id, states.name, countries.name FROM states INNER JOIN countries on states.country_id = countries.id;

5. Let's create a table named persons to store both members and admins
CREATE TABLE persons (
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    cid VARCHAR(12) NOT NULL,
    dob DATE NOT NULL,
    phone VARCHAR(15) NOT NULL,
    address_id int NOT NULL,
    PRIMARY KEY (cid),
    UNIQUE(address_id),
    FOREIGN KEY (address_id) REFERENCES addresses(id));

6. Create a table named accounts to store librarians and members' accounts.
    CREATE TABLE accounts (
        id VARCHAR(7),
        cid VARCHAR(12) NOT NULL,
        password TEXT NOT NULL,
        status SMALLINT NOT NULL,
        PRIMARY KEY (id),
        UNIQUE (cid),
        FOREIGN KEY (cid) REFERENCES persons(cid));

    INSERT INTO accounts VALUES ('MU00001', '219-37-8710', crypt('password', gen_salt('bf')), 1);

7. Joining Five Tables to see the results.
    SELECT
        accounts.id,
        accounts.password,
        accounts.status,
        persons.first_name,
        persons.last_name,
        persons.cid,
        persons.dob,
        persons.phone,
        addresses.street,
        addresses.city,
        states.name AS state,
        countries.name AS country
    FROM persons
    JOIN addresses
        ON persons.address_id = addresses.id
    JOIN accounts
        ON accounts.cid = persons.cid
    JOIN states
        ON addresses.state_id = states.id
    JOIN countries
        ON states.country_id = countries.id;


    JOINING FOUR TABLES to see the person and address.

    SELECT
            persons.first_name,
            persons.last_name,
            persons.cid,
            persons.dob,
            persons.phone,
            addresses.street,
            addresses.city,
            states.name AS state,
            countries.name AS country
        FROM persons
        JOIN addresses
            ON persons.address_id = addresses.id
        JOIN states
            ON addresses.state_id = states.id
        JOIN countries
            ON states.country_id = countries.id;


8. Create a table named members to store members' expire date.
    CREATE TABLE members (
        id VARCHAR(7),
        expire_date DATE NOT NULL,
        PRIMARY KEY (id),
        FOREIGN KEY (id) REFERENCES accounts(id));

9. Create a table named categories to store books' categories.
    CREATE TABLE categories (
        id SMALLINT ALWAYS GENERATED AS IDENTITY,
        name VARCHAR(40) NOT NULL,
        PRIMARY KEY (id),
        UNIQUE (name));

10. Create a table named books to store books
    CREATE TABLE books (
        isbn VARCHAR(13),
        title TEXT NOT NULL,
        authors TEXT NOT NULL,
        publisher TEXT NOT NULL,
        language_code VARCHAR(6) NOT NULL,
        number_of_pages SMALLINT NOT NULL,
        category_id SMALLINT NOT NULL,
        PRIMARY KEY (isbn),
        FOREIGN KEY (category_id) REFERENCES categories(id));

    SELECT
         books.isbn,
         books.title,
         books.authors,
         books.number_of_pages,
         categories.name
         FROM books
         JOIN categories
         ON books.category_id = categories.id;

11. Create book_formats table to store types of book formats
    CREATE TABLE book_formats (
        id SMALLINT GENERATED ALWAYS AS IDENTITY,
        format VARCHAR(40),
        PRIMARY KEY (id));

12. Create book_status table to store status of a book
    CREATE TABLE book_status (
        id SMALLINT GENERATED ALWAYS AS IDENTITY,
        status VARCHAR(15) NOT NULL,
        PRIMARY KEY (id));


12. Create book_item to store book items.
    CREATE TABLE book_items (
        barcode VARCHAR(12),
        isbn VARCHAR(13) NOT NULL,
        price REAL NOT NULL,
        format_id SMALLINT NOT NULL,
        status SMALLINT NOT NULL,
        date_of_purchased DATE NOT NULL,
        publication_date DATE NOT NULL,
        PRIMARY KEY (barcode),
        FOREIGN KEY (isbn) REFERENCES books(isbn),
        FOREIGN KEY (status) REFERENCES book_status(id),
        FOREIGN KEY (format_id) REFERENCES book_formats(id));

Let's consider MU00### as Librarian and others as Members

